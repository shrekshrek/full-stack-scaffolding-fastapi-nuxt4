---
alwaysApply: true
---
# FastAPI 后端开发核心规则

**完整指南详见项目内的：[`backend/CONTRIBUTING.md`](mdc:backend/CONTRIBUTING.md)**

本规则为 AI 提供核心开发规范，确保代码生成的一致性。


## 1. 核心技术与架构

- **核心框架**: FastAPI
- **项目结构**: 严格遵循 `src` 目录下的模块化领域驱动设计。
- **数据库**: PostgreSQL + SQLAlchemy (ORM) + Alembic (迁移)
- **异步任务**: Celery + Redis
- **LLM**: LangChain `v0.3+`
- **包管理**: PDM


## 2. 关键编码实践

- **设计原则**:
    - **KISS 原则**: 保持简单，避免过度工程化。优先实用性，按需渐进式增强。
    - **统一处理**: 使用全局中间件和响应格式确保API的一致性。

- **异步与性能**:
    - **异步优先**: I/O 密集型操作**必须**使用 `async def`。
    - **依赖注入**: 广泛使用 FastAPI 的依赖注入系统来解耦和复用逻辑 (e.g., `db session`, `get_current_user`)。

- **任务与配置**:
    - **任务定义**: Celery 任务**必须**定义在对应领域模块的 `tasks.py` 文件中。
    - **配置管理**: 使用 `pydantic-settings` 从 `.env` 文件加载全局配置。

- **API 规范**:
    - **文档完整**: 所有端点**必须**包含明确的 `response_model`, `status_code`, `tags`, 和 `summary`。
    - **FastAPI 原生优先**: 直接返回业务数据，让框架处理序列化。通过 `response_model` 定义响应结构。
    - **标准错误处理**: 使用 `HTTPException` 处理业务错误，让全局中间件统一处理。

- **错误与日志处理**:
    - **全局异常**: 使用 `src/middleware.py` 中的全局中间件统一处理所有异常。
    - **请求日志**: 自动记录所有API请求、响应时间和错误信息。
    - **避免过度设计**: 不提前构建复杂的权限系统或验证框架，保持代码简洁实用。

- **请求日志**: 自动记录所有API请求、响应时间和错误信息。
- **避免过度设计**: 不提前构建复杂的权限系统或验证框架，保持代码简洁实用。
