---
alwaysApply: true
---
# Nuxt.js 前端开发核心规则

**完整指南详见项目内的：[`frontend/CONTRIBUTING.md`](mdc:frontend/CONTRIBUTING.md)**

本规则为 AI 提供核心开发规范，确保代码生成的一致性。


## 1. 核心技术与架构

- **核心框架**: Nuxt 3
- **架构模式**: Nuxt Layers。业务代码按领域封装在 `layers/` 目录中 (e.g., `layers/auth`, `layers/rbac`)。
- **UI 库**: `@nuxt/ui v3`。复用性UI组件应放入 `layers/ui-kit`。
- **状态管理**: Pinia。Store 按业务领域存放在 Layer 的 `stores/` 目录。
- **认证**: `@sidebase/nuxt-auth`。
- **数据可视化**: `ECharts`。


## 2. 关键编码实践

- **设计原则**:
    - **KISS 原则**: 保持简单，避免过度工程化。优先实用性，按需渐进式增强。
    - **统一处理**: 使用封装好的工具确保代码一致性和可维护性。

- **API 请求**:
    - **必须**使用项目封装的 `composables/useApi.ts` 进行所有后端 API 通信。
    - **必须**使用 `apiRequest()` 方法处理客户端操作（如表单提交）。
    - **必须**使用 `useApiData()` 方法进行SSR友好的数据获取。
    - **禁止**在业务代码中直接使用原始的 `$fetch` 或 `useFetch`。

- **状态与错误处理**:
    - **必须**依赖 `useApi()` 内置的错误处理和通知功能，确保体验一致。
    - **必须**使用 `useLoading` 或 `useFormValidation` 管理加载和表单状态。
    - 认证Token失效（401错误）由系统自动处理，无需在业务代码中手动干预。

- **认证流程**:
    - 认证逻辑在 `server/api/auth/[...].ts` 中实现。
    - 页面级保护**必须**使用 `definePageMeta({ middleware: 'auth' })`。
    - 组件内获取用户状态使用 `useAuth()`。

- **客户端渲染**:
    - **必须**使用 `<ClientOnly>` 组件包裹所有仅限客户端的库，特别是 `ECharts` 图表。
    - **必须**为 `<ClientOnly>` 提供 `fallback` 内容，以提升用户体验。

- **样式**:
    - 优先使用 `@nuxt/ui v3` 提供的组件和设计令牌 (design tokens)。
    - 全局样式定制在 `app.config.ts` 中完成。
    - 局部微调直接在组件上使用 Tailwind CSS 的 `class`。
