# 本文件是主 .env 文件的模板.
# 复制本文件到 .env 并填入适当的值.
# 重要: .env 文件不应该被提交到版本控制中.

# --- PostgreSQL 数据库 ---
# 这些变量由 docker-compose.yml 中的 postgres_db 服务使用
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=fastapi_db

# --- 后端应用 (FastAPI) ---
# 这是后端应用用于连接数据库的连接字符串.
# 对于使用 Docker 的本地开发, 主机名是服务名 'postgres_db'.
DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres_db:5432/fastapi_db

# --- Redis (通用) ---
# 用于应用的缓存、速率限制等.
# 对于使用 Docker 的本地开发, 主机名是服务名 'redis'.
REDIS_URL=redis://redis:6379/1

# --- Celery (任务队列) ---
# 用于 Redis 的连接字符串, 作为消息代理和结果后端.
# 注意: 推荐为 Celery 使用独立的 Redis 数据库 (如 DB 0),
# 与通用缓存所用的数据库 (如 DB 1) 分开.
# 对于使用 Docker 的本地开发, 主机名是服务名 'redis'.
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# --- 安全性 ---
# 用于签发 JWT 的强壮、唯一的密钥.
# 可以通过以下命令生成一个: openssl rand -hex 32
SECRET_KEY=a_very_secret_key_that_should_be_changed

# Token 过期时间 (分钟)
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_MINUTES=10080 # 7 天

# --- 邮件设置 ---
# 在本地开发中, 这些指向 MailHog 服务.
SMTP_HOST=mailhog
SMTP_PORT=1025
SMTP_USER=
SMTP_PASSWORD=
EMAILS_FROM_EMAIL=your_email@example.com
EMAILS_FROM_NAME="你的应用名称"

# --- 项目设置 ---
PROJECT_NAME="全栈应用"
BACKEND_CORS_ORIGINS='["http://localhost:3000"]'
