# 本文件是主 .env 文件的模板.
# 复制本文件到 .env 并填入适当的值.
# 重要: .env 文件不应该被提交到版本控制中.

# --- 项目标识 (必须设置!) ---
# 用于隔离不同项目的 Docker 资源（容器、数据卷、数据库）
# 建议使用项目目录名或有意义的短名称，如: crm, admin, api_v2
# 多个项目可以同时运行而不会相互冲突
PROJECT_NAME=fullstack_scaffold

# --- PostgreSQL 数据库 ---
# 这些变量由 docker-compose.yml 中的 postgres_db 服务使用
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=${PROJECT_NAME}_db

# --- 后端应用 (FastAPI) ---
# 这是后端应用用于连接数据库的连接字符串.
# 对于使用 Docker 的本地开发, 主机名是服务名 'postgres_db'.
# 数据库名会根据 PROJECT_NAME 自动生成，确保项目间隔离
DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}

# --- Redis (通用) ---
# 用于应用的缓存、速率限制等.
# 对于使用 Docker 的本地开发, 主机名是服务名 'redis'.
REDIS_URL=redis://redis:6379/1

# --- Celery (任务队列 - 预留功能) ---
# 用于异步任务处理（如邮件发送、数据导出等）
# 当前基础设施已就绪，但尚未定义具体任务
# 推荐使用独立的 Redis 数据库（DB 0），与缓存（DB 1）分开
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# --- 安全性 ---
# 用于签发 JWT 的强壮、唯一的密钥.
# 可以通过以下命令生成一个: openssl rand -hex 32
SECRET_KEY=a_very_secret_key_that_should_be_changed

# Token 过期时间 (分钟)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# --- 后端 CORS 配置 ---
BACKEND_CORS_ORIGINS='["http://localhost:3000"]'

# --- 前端配置 ---
NUXT_PUBLIC_API_BASE=http://localhost:8000/api/v1
# Session 加密密码（至少32字符，用于加密 cookie）
NUXT_SESSION_PASSWORD=this-is-a-32-character-string-for-dev-only!
