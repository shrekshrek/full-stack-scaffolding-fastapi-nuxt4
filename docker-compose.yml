# Docker Compose 项目名从 PROJECT_NAME 环境变量自动生成
# 这确保了多个基于此脚手架的项目可以同时运行而不会冲突
name: "${PROJECT_NAME:-fullstack-app}"

services:
  postgres_db:
    image: postgres:16-alpine
    # 不使用固定 container_name，让 Docker Compose 基于项目名自动生成
    # 格式: {project_name}_postgres_db_1
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-fastapi_db}
    ports:
      - "5432:5432"
    volumes:
      # 使用项目名前缀的数据卷，确保不同项目的数据隔离
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    # 不使用固定 container_name，让 Docker Compose 基于项目名自动生成
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # 不使用固定 container_name，让 Docker Compose 基于项目名自动生成
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/.venv
    command: sh -c "uv run alembic upgrade head && uv run uvicorn src.main:app --host 0.0.0.0 --reload"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    env_file:
      - .env
    dns:
      - 8.8.8.8
    depends_on:
      - postgres_db
      - redis


volumes:
  # 数据卷会自动使用项目名前缀: {PROJECT_NAME}_postgres_data
  # Docker Compose 会根据项目名自动为数据卷添加前缀，确保项目间数据隔离
  postgres_data: 
  redis_data: 